# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=<%= @broker_id %>

############################# Socket Server Settings #############################

# listeners=PLAINTEXT://:9092

# The port the socket server listens on
port=<%= @port %>

# Hostname the broker will bind to. If not set, the server will bind to all interfaces
host.name=<%= @ipaddress %>

# Hostname the broker will advertise to producers and consumers. If not set, it uses the
# value for "host.name" if configured.  Otherwise, it will use the value returned from
# java.net.InetAddress.getCanonicalHostName().
advertised.host.name=<%= @fqdn %>

# The port to publish to ZooKeeper for clients to use. If this is not set,
# it will publish the same port that the broker binds to.
#advertised.port=<port accessible by clients>

# The number of threads handling network requests
num.network.threads=<%= @num_network_threads %>

# The number of threads doing disk I/O
num.io.threads=<%= @num_io_threads %>

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=<%= @socket_send_buffer_bytes %>

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=<%= @socket_receive_buffer_bytes %>

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=<%= @socket_request_max_bytes %>


############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs=<%= @log_dirs %>

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=<%= @num_partitions %>

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=<%= @num_recovery_threads_per_data_dir %>

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
log.flush.interval.messages=<%= @log_flush_interval_messages %>

# The maximum amount of time a message can sit in a log before we force a flush
log.flush.interval.ms=<%= @log_flush_interval_ms %>

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours=<%= @log_retention_hours %>

# Number of minutes to keep a log file before deleting it.
log.retention.minutes=<%= @log_retention_minutes %>

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
log.retention.bytes=<%= @log_retention_bytes %>

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=<%= @log_segment_bytes %>

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=<%= @log_retention_check_interval_ms %>

# By default the log cleaner is disabled and the log retention policy will default to just delete segments after their retention expires.
# If log.cleaner.enable=true is set the cleaner will be enabled and individual logs can then be marked for log compaction.
log.cleaner.enable=<%= @log_cleaner_enable %>

# Amount of time to sleep when there are no logs to clean
log.cleaner.backoff.ms=<%= @log_cleaner_backoff_ms %>

# The total memory used for log deduplication across all cleaner threads
log.cleaner.dedupe.buffer.size=<%= @log_cleaner_dedupe_buffer_size %>

# How long delete records are retained
log.cleaner.delete.retention.ms=<%= @log_cleaner_delete_retention_ms %>

# Log cleaner dedupe buffer load factor
log.cleaner.io.buffer.load.factor=<%= @log_cleaner_io_buffer_load_factor %>

# Total memory used for log clean I/O buffers across all cleaner threads
log.cleaner.io.buffer.size=<%= @log_cleaner_io_buffer_size %>

# Minimum ratio of dirty log to total log for a log to be eligible for cleaning
log.cleaner.min.cleanable.ratio=<%= @log_cleaner_min_cleanable_ratio %>

# Number of background threads to use for log cleaning
log.cleaner.threads=<%= @log_cleaner_threads %>

# Default cleanup policy for segments for segments beyond the retention window. Values: delete, compact
log.cleanup.policy=<%= @log_cleanup_policy %>

# The directories in which the log data is kept
log.dirs=<%= @log_dirs %>

# Number of messages accumulated on a log partition before messages are flushed to disk
log.flush.interval.messages=<%= @log_flush_interval_messages %>

# Maximum time in ms that a message in any topic is kept in memory before being flushed to disk
log.flush.interval.ms=<%= @log_flush_interval_ms %>

# Frequency with which we update the persistent record of the last flush which acts as the log recovery point
log.flush.offset.checkpoint.interval.ms=<%= @log_flush_offset_checkpoint_interval_ms %>

# Frequency in ms that the log flusher checks whether any log needs to be flushed to disk
log.flush.scheduler.interval.ms=<%= @log_flush_scheduler_interval_ms %>

# Interval with which we add an entry to the offset index
log.index.interval.bytes= <%= @log_index_interval_bytes %>

# Maximum size in bytes of the offset index
log.index.size.max.bytes=<%= @log_index_size_max_bytes %>

# Maximum time before a new log segment is rolled out in hours
log.roll.hours=<%= @log_roll_hours %>

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=<%= @zookeeper_connect.join(",") %>

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=<%= @zookeeper_connection_timeout_ms %>

# Zookeeper session timeout
zookeeper.session.timeout.ms=<%= @zookeeper_session_timeout_ms %>

# How far a Zookeeper follower can be behind the Zookeeper leader
zookeeper.sync.time.ms=<%= @zookeeper_sync_time_ms %>

############################# Replication #############################
# Number of bytes of messages to attempt to fetch
replica.fetch.max.bytes=<%= @replica_fetch_max_bytes %>
# Minimum number of expected for each fetch response
replica.fetch.min.bytes=<%= @replica_fetch_min_bytes %>
# Max wait time for each fetcher request issued by follower replicas
replica.fetch.wait.max.ms=<%= @replica_fetch_wait_max_ms %>
# The frequency with which the high watermark is saved out to disk
replica.high.watermark.checkpoint.interval.ms=<%= @replica_high_watermark_checkpoint_interval_ms %>

# If a follower hasn't sent any fetch requests or hasn't consumed up to the leaders log
# end offset for at least this time, the leader will remove the follower from isr
replica.lag.time.max.ms=<%= @replica_lag_time_max_ms %>

# The socket receive buffer for network requests
replica.socket.receive.buffer.bytes=<%= @replica_socket_receive_buffer_bytes %>

# Socket timeout for network requests
replica.socket.timeout.ms=<%= @replica_socket_timeout_ms %>

############################# Auto options #############################
# Enable autocreation of topic
auto.create.topics.enable=<%= @auto_create_topics_enable %>

# Enable auto leader rebalancing
auto.leader.rebalance.enable=<%= @auto_leader_rebalance_enable %>

# The number of background threads to use
background.threads=<%= @background_threads %>

# Controlled shutdown of server enabled
controlled.shutdown.enable=<%= @controlled_shutdown_enable %>
# Number of retries to attempt when controlled shutdown fails.
controlled.shutdown.max.retries=<%= @controlled_shutdown_max_retries %>
# How long to wait between controlled shutdown retries
controlled.shutdown.retry.backoff.ms=<%= @controlled_shutdown_retry_backoff_ms %>
# Size of the controller message queue
controller.message.queue.size=<%= @controller_message_queue_size %>
# Socket timeout for controller-to-broker channels
controller.socket.timeout.ms=<%= @controller_socket_timeout_ms %>

# Default replication factor for automatically created topics
default.replication.factor=<%= @default_replication_factor %>

# Enables topic deletion
delete.topic.enable=<%= @delete_topic_enable %>

# The purge interval (in number of requests) of the fetch request purgatory
fetch.purgatory.purge.interval.requests=<%= @fetch_purgatory_purge_interval_requests %>

# The frequency with which the partition rebalance check is triggered by the controller
leader.imbalance.check.interval.seconds=<%= @leader_imbalance_check_interval_seconds %>

# The ratio of leader imbalance allowed per broker
leader.imbalance.per.broker.percentage=<%= @leader_imbalance_per_broker_percentage %>

# The maximum size of a message that a server can receive
message.max.bytes=<%= @message_max_bytes %>

# Number of fetcher threads used to replicate messages from a source broker
num.replica.fetchers=<%= @num_replica_fetchers %>

# The maximum size for a metadata entry associated with an offset commit
offset.metadata.max.bytes=<%= @offset_metadata_max_bytes %>

# The purge interval (in number of requests) of the producer request purgatory
producer.purgatory.purge.interval.requests=<%= @producer_purgatory_purge_interval_requests %>

# The number of queued requests allowed before blocking the network threads
queued.max.requests=<%= @queued_max_requests %>
